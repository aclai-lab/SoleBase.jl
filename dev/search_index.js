var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = SoleBase","category":"page"},{"location":"#SoleBase","page":"Home","title":"SoleBase","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SoleBase.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [SoleBase]","category":"page"},{"location":"#SoleBase.LogDebug","page":"Home","title":"SoleBase.LogDebug","text":"Log debug info\n\n\n\n\n\n","category":"constant"},{"location":"#SoleBase.LogDetail","page":"Home","title":"SoleBase.LogDetail","text":"Log detailed debug info\n\n\n\n\n\n","category":"constant"},{"location":"#SoleBase.LogOverview","page":"Home","title":"SoleBase.LogOverview","text":"Log overview info\n\n\n\n\n\n","category":"constant"},{"location":"#SoleBase.AbstractDataset","page":"Home","title":"SoleBase.AbstractDataset","text":"abstract type AbstractDataset end\n\nAbstract supertype for all datasets.\n\nSee also ninstances.\n\n\n\n\n\n","category":"type"},{"location":"#SoleBase._groupby-Tuple{AbstractVector, AbstractVector}","page":"Home","title":"SoleBase._groupby","text":"group items of list l according to the corresponding values in list v\n\njulia> _groupby([31,28,31,30,31,30,31,31,30,31,30,31],\n       [:Jan,:Feb,:Mar,:Apr,:May,:Jun,:Jul,:Aug,:Sep,:Oct,:Nov,:Dec])\nDict{Int64,Array{Symbol,1}} with 3 entries:\n    31 => Symbol[:Jan, :Mar, :May, :Jul, :Aug, :Oct, :Dec]\n    28 => Symbol[:Feb]\n    30 => Symbol[:Apr, :Jun, :Sep, :Nov]\n\n\n\n\n\n","category":"method"},{"location":"#SoleBase._groupby-Tuple{Any, AbstractVector}","page":"Home","title":"SoleBase._groupby","text":"group items of list l according to the values taken by function f on them\n\njulia> _groupby(iseven,1:10)\nDict{Bool,Array{Int64,1}} with 2 entries:\n    false => [1, 3, 5, 7, 9]\n    true  => [2, 4, 6, 8, 10]\n\nNote:in this version l is required to be non-empty since I do not know how to access the return type of a function\n\n\n\n\n\n","category":"method"},{"location":"#SoleBase.humansize-Tuple{Any}","page":"Home","title":"SoleBase.humansize","text":"Returns the human-readable size in Bytes/KBs/MBs/GBs/TBs of a Julia object.\n\n\n\n\n\n","category":"method"},{"location":"#SoleBase.instances-Union{Tuple{D}, Tuple{D, AbstractVector{<:Integer}, Union{Val{true}, Val{false}}}} where D","page":"Home","title":"SoleBase.instances","text":"function slicedataset(\n    dataset::D,\n    dataset_slice::AbstractVector{<:Integer};\n    allow_no_instances = false,\n    return_view = false,\n    kwargs...,\n) where {D<:AbstractDataset}\n\nReturn a machine learning dataset with a subset of the instances.\n\nImplementation\n\nIn order to use slicedataset on a custom dataset representation, provide the following method:     instances(         dataset::D,         datasetslice::AbstractVector{<:Integer},         returnview::Union{Val{true},Val{false}};         kwargs...     ) where {D<:AbstractDataset}\n\n\n\n\n\n","category":"method"},{"location":"#SoleBase.movingwindow-Tuple{Integer}","page":"Home","title":"SoleBase.movingwindow","text":"movingwindow(vec::AbstractVector; kwargs...)::AbstractVector{UnitRange{Int}}\nmovingwindow(npoints::Integer; kwargs...)::AbstractVector{UnitRange{Int}}\n\nReturn a certain number of equally-spaced windows (i.e., vector of integer indices), used for slicing a vector vec (or a vector of npoints values).\n\nmovingwindow(f::Base.Callable, vec::AbstractVector; kwargs...)::AbstractVector\n\nReturn the map of f over the window slicing of vec.\n\nAs for the keyword arguments, different flavors of this function are available, according to different use cases.\n\nFixed-size windows\n\nfunction movingwindow(\n    npoints::Integer;\n    window_size::Union{Nothing,Number} = nothing,\n    window_step::Union{Nothing,Number} = nothing,\n    # Optional arguments\n    landmark::Union{Integer,Nothing} = nothing,\n    allow_landmark_position::Tuple{<:AbstractFloat,<:AbstractFloat} = (0.0, 1.0),\n    kwargs...\n)::AbstractVector{UnitRange{Int}}\n\nReturns windows of length window_size, with a step between consecutive windows of window_step. When the window_step is a floating point number, the step within the returned windows is not constant, but fluctuates around window_step.\n\nWhen a landmark::Integer point is specified to the function, only windows containing the landmark will be returned. For example, with npoints=100 and landmark=50, all the windows will contain 50. It is also possible to specify the range for the relative position of the landmark within the windows using allow_landmark_position.\n\nFixed number of windows\n\nfunction movingwindow(\n    npoints::Integer;\n    nwindows::Union{Nothing,Integer} = nothing,\n    relative_overlap::Union{Nothing,AbstractFloat} = nothing,\n    kwargs...\n)::AbstractVector{UnitRange{Int}}\n\nCompute nwindows windows, with consecutive windows overlapping by a portion equal to relative_overlap.\n\nFixed number of fixed-sized windows\n\nfunction movingwindow(\n    npoints::Integer;\n    nwindows::Union{Nothing,Integer} = nothing,\n    window_size::Union{Nothing,Number} = nothing,\n    kwargs...\n)::AbstractVector{UnitRange{Int}}\n\nCompute nwindows windows of length window_size.\n\nExamples\n\nTODO\n\nCompute windows of length window_size, with consecutive windows being shifted by window_step units.\n\n\n\n\n\n","category":"method"},{"location":"#SoleBase.nat_sort-Tuple{Any, Any}","page":"Home","title":"SoleBase.nat_sort","text":"nat_sort(x, y)\n\n\"Little than\" function implementing natural sort. It is meant to be used with Base.Sort functions as in sort(..., lt=nat_sort).\n\n\n\n\n\n","category":"method"},{"location":"#SoleBase.ninstances-Tuple{AbstractDataset}","page":"Home","title":"SoleBase.ninstances","text":"ninstances(X::AbstractDataset)\n\nReturns the number of instances (or samples) in the dataset.\n\nSee also AbstractDataset.\n\n\n\n\n\n","category":"method"},{"location":"#SoleBase.slicedataset-Union{Tuple{D}, Tuple{D, Union{Colon, Integer, Tuple, AbstractVector}}} where D","page":"Home","title":"SoleBase.slicedataset","text":"function slicedataset(\n    dataset::D,\n    dataset_slice::AbstractVector{<:Integer};\n    allow_no_instances = false,\n    return_view = false,\n    kwargs...,\n) where {D<:AbstractDataset}\n\nReturn a machine learning dataset with a subset of the instances.\n\nImplementation\n\nIn order to use slicedataset on a custom dataset representation, provide the following method:     instances(         dataset::D,         datasetslice::AbstractVector{<:Integer},         returnview::Union{Val{true},Val{false}};         kwargs...     ) where {D<:AbstractDataset}\n\n\n\n\n\n","category":"method"},{"location":"#SoleBase.spawn-Tuple{Random.AbstractRNG}","page":"Home","title":"SoleBase.spawn","text":"Spawns a MersenneTwister seeded using a number peeled from another rng. Useful for reproducibility.\n\n\n\n\n\n","category":"method"},{"location":"#SoleBase.throw_n_log","page":"Home","title":"SoleBase.throw_n_log","text":"throw_n_log(str::AbstractString, err_type = ErrorException)\n\nLogs string str with @error and throw error of type err_type.\n\n\n\n\n\n","category":"function"}]
}
